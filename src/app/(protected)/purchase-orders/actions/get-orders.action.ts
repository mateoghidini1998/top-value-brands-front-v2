import { apiRequest } from "@/helpers/http.adapter";

// Generated by https://quicktype.io

export interface GetOrdersResponse {
  success: boolean;
  total: number;
  pages: number;
  currentPage: number;
  data: Order[];
}

export interface Order {
  id: number;
  order_number: string;
  supplier_id: number;
  purchase_order_status_id: number;
  total_price: string;
  notes: null | string;
  is_active: boolean;
  updatedStatusAt: Date | null;
  createdAt: Date;
  updatedAt: Date;
  purchaseOrderProducts: PurchaseOrderProduct[];
  purchaseOrderStatus: PurchaseOrderStatus;
  supplier_name: string;
  status: Status;
  average_roi: number | null;
  trackedProducts: TrackedProduct[];
}

export interface PurchaseOrderProduct {
  id: number;
  purchase_order_id: number;
  product_id: number;
  unit_price: string;
  product_cost: string;
  total_amount: string;
  profit: string;
  quantity_purchased: number;
  quantity_received: number | null;
  quantity_missing: number;
  quantity_available: number;
  reason_id: number | null;
  notes: null | string;
  expire_date: Date | null;
  is_active: boolean;
  createdAt: Date;
  updatedAt: Date;
  product_name: string;
}

export interface PurchaseOrderStatus {
  description: Status;
}

export enum Status {
  Arrived = "Arrived",
  Cancelled = "Cancelled",
  Closed = "Closed",
  InTransit = "In transit",
  Pending = "Pending",
  Rejected = "Rejected",
  WaitingForSupplierApproval = "Waiting for supplier approval",
}

export interface TrackedProduct {
  id: number;
  product_id: number;
  current_rank: number;
  thirty_days_rank: number;
  ninety_days_rank: number;
  units_sold: number;
  product_velocity: number;
  lowest_fba_price: number;
  fees: number | null;
  profit: number | null;
  is_active: boolean;
  createdAt: Date;
  updatedAt: Date;
  product_name: string;
  ASIN: string;
  seller_sku: string;
  supplier_name: string;
  product_image: null | string;
  product_cost: string;
}

interface GetOrdersProps {
  page?: number;
  limit?: number;
  keyword?: string;
  supplier?: string;
  orderBy?: string;
  orderWay?: string;
}

export const getOrders = async ({
  page = 1,
  limit = 50,
  keyword = "",
  supplier = "",
  orderBy = "",
  orderWay = "",
}: GetOrdersProps = {}): Promise<GetOrdersResponse> => {
  const url = `${process.env.NEXT_PUBLIC_API_URL}/api/v1/purchaseorders?page=${page}&limit=${limit}&keyword=${keyword}&supplier=${supplier}&orderBy=${orderBy}&orderWay=${orderWay}`;
  return apiRequest<GetOrdersResponse>(url);
};
